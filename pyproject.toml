[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "explainable-moe-debugger"
dynamic = ["version"]
description = "Chrome DevTools-style GUI for debugging Mixture of Experts models"
readme = "README.md"
license = "MIT"
requires-python = ">=3.10"
authors = [
    {name = "Daniel Schmidt", email = "daniel@terragonlabs.com"},
]
keywords = [
    "machine-learning",
    "mixture-of-experts",
    "debugging",
    "visualization",
    "pytorch",
    "transformers"
]
classifiers = [
    "Development Status :: 2 - Pre-Alpha",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Software Development :: Debuggers",
    "Topic :: Software Development :: Libraries :: Python Modules",
]
dependencies = [
    # Core ML frameworks
    "torch>=2.0.0",
    "numpy>=1.21.0",
    
    # Backend web framework
    "fastapi>=0.100.0",
    "uvicorn[standard]>=0.20.0",
    "websockets>=11.0.0",
    
    # Data processing and analysis
    "pandas>=1.5.0",
    "scipy>=1.9.0",
    
    # System monitoring
    "psutil>=5.9.0",
    
    # Configuration and utilities
    "pydantic>=2.0.0",
]

[project.optional-dependencies]
dev = [
    # Testing
    "pytest>=7.0.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.0.0",
    "pytest-mock>=3.10.0",
    
    # Code quality
    "ruff>=0.1.0",
    "mypy>=1.5.0",
    "pre-commit>=3.3.0",
    
    # Documentation
    "mkdocs>=1.5.0",
    "mkdocs-material>=9.0.0",
    "mkdocstrings[python]>=0.22.0",
    
    # Development utilities
    "ipython>=8.10.0",
    "jupyter>=1.0.0",
]
jax = [
    "jax[cpu]>=0.4.1",
    "flax>=0.7.0",
]
tensorflow = [
    "tensorflow>=2.13.0",
]
huggingface = [
    "transformers>=4.30.0",
    "tokenizers>=0.13.0",
]
database = [
    "sqlalchemy>=2.0.0",
    "alembic>=1.12.0",
]
cache = [
    "redis>=4.5.0",
]
all = [
    "explainable-moe-debugger[dev,jax,tensorflow,huggingface,database,cache]",
]

[project.urls]
Homepage = "https://github.com/danieleschmidt/Explainable-MoE-Debugger"
Documentation = "https://github.com/danieleschmidt/Explainable-MoE-Debugger#readme"
Repository = "https://github.com/danieleschmidt/Explainable-MoE-Debugger.git"
"Bug Reports" = "https://github.com/danieleschmidt/Explainable-MoE-Debugger/issues"
Changelog = "https://github.com/danieleschmidt/Explainable-MoE-Debugger/releases"

[project.scripts]
moe-debugger = "moe_debugger.cli:main"
moe-analyze = "moe_debugger.analyze:main"

[tool.hatch.version]
path = "src/moe_debugger/__about__.py"

[tool.hatch.build.targets.wheel]
packages = ["src/moe_debugger"]

[tool.hatch.build.targets.sdist]
exclude = [
    "/.github",
    "/docs",
    "/frontend",
    "/examples",
    "/tests",
]

# Ruff configuration
[tool.ruff]
target-version = "py310"
line-length = 88
select = [
    "E", "W",    # pycodestyle
    "F",         # pyflakes
    "I",         # isort
    "B",         # flake8-bugbear
    "C4",        # flake8-comprehensions
    "PGH",       # pygrep-hooks
    "RUF",       # ruff
    "UP",        # pyupgrade
]
ignore = [
    "E501",      # line too long, handled by black
    "B008",      # do not perform function calls in argument defaults
    "C901",      # too complex
    "RUF012",    # mutable class attributes should be annotated with `typing.ClassVar`
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]
"tests/**/*" = ["PGH001", "PGH003"]

[tool.ruff.isort]
known-first-party = ["moe_debugger"]

# MyPy configuration
[tool.mypy]
python_version = "3.10"
strict = true
warn_unreachable = true
pretty = true
show_column_numbers = true
show_error_codes = true
show_error_context = true

# Pytest configuration
[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
    "--strict-markers",
    "--strict-config",
    "--cov=moe_debugger",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
]
testpaths = ["tests"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

# Coverage configuration
[tool.coverage.run]
source = ["src"]
branch = true
omit = [
    "*/tests/*",
    "*/examples/*",
    "*/__about__.py",
]

[tool.coverage.report]
exclude_lines = [
    "no cov",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    "raise NotImplementedError",
    "pragma: no cover",
]