# Docker Compose for MoE Debugger Production Deployment
version: '3.8'

services:
  # MoE Debugger Main Service
  moe-debugger:
    build: .
    ports:
      - "8080:8080"
    environment:
      - MOE_DEBUG_LOG_LEVEL=INFO
      - MOE_DEBUG_HOST=0.0.0.0
      - MOE_DEBUG_PORT=8080
      - MOE_DEBUG_MEMORY_LIMIT=4096
      - REDIS_URL=redis://redis:6379
    volumes:
      - ./logs:/app/logs
      - ./data:/app/data
      - ./cache:/app/cache
    depends_on:
      - redis
    restart: unless-stopped
    networks:
      - moe-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Frontend service (keep existing if needed)
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.dev
    ports:
      - "3000:3000"
    volumes:
      - ./frontend/src:/app/src
      - ./frontend/public:/app/public
    environment:
      - NODE_ENV=production
      - REACT_APP_API_URL=http://localhost:8080
      - REACT_APP_WS_URL=ws://localhost:8080/ws
    depends_on:
      - moe-debugger
    networks:
      - moe-network

  # Redis for caching and real-time data
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - moe-network
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx reverse proxy (for production-like setup)
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - moe-debugger
    restart: unless-stopped
    networks:
      - moe-network

  # Monitoring with Prometheus (optional)
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./docker/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    networks:
      - moe_network
    profiles:
      - monitoring

  # Grafana for metrics visualization (optional)
  grafana:
    image: grafana/grafana:latest
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./docker/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./docker/grafana/datasources:/etc/grafana/provisioning/datasources
    depends_on:
      - prometheus
    networks:
      - moe_network
    profiles:
      - monitoring

volumes:
  postgres_data:
  redis_data:
  prometheus_data:
  grafana_data:
  model_cache:
  debug_data:

networks:
  moe-network:
    driver: bridge

# Development overrides
# Create docker-compose.override.yml for local customizations:
#
# version: '3.8'
# services:
#   backend:
#     environment:
#       - CUSTOM_ENV_VAR=value
#     volumes:
#       - /path/to/local/models:/app/models
#
#   frontend:
#     environment:
#       - REACT_APP_DEBUG=true